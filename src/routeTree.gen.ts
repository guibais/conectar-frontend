/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as PanelRouteImport } from './routes/_panel'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PanelProfileRouteImport } from './routes/_panel/profile'
import { Route as PanelNotificationsIndexRouteImport } from './routes/_panel/notifications/index'
import { Route as PanelClientsIndexRouteImport } from './routes/_panel/clients/index'
import { Route as PanelClientsClientsRouteImport } from './routes/_panel/clients/clients'
import { Route as PanelClientsCreateIndexRouteImport } from './routes/_panel/clients/create/index'
import { Route as PanelClientsClientIdIndexRouteImport } from './routes/_panel/clients/$clientId/index'
import { Route as PanelClientsClientIdIndexCleanRouteImport } from './routes/_panel/clients/$clientId/index-clean'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PanelRoute = PanelRouteImport.update({
  id: '/_panel',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PanelProfileRoute = PanelProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => PanelRoute,
} as any)
const PanelNotificationsIndexRoute = PanelNotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => PanelRoute,
} as any)
const PanelClientsIndexRoute = PanelClientsIndexRouteImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => PanelRoute,
} as any)
const PanelClientsClientsRoute = PanelClientsClientsRouteImport.update({
  id: '/clients/clients',
  path: '/clients/clients',
  getParentRoute: () => PanelRoute,
} as any)
const PanelClientsCreateIndexRoute = PanelClientsCreateIndexRouteImport.update({
  id: '/clients/create/',
  path: '/clients/create/',
  getParentRoute: () => PanelRoute,
} as any)
const PanelClientsClientIdIndexRoute =
  PanelClientsClientIdIndexRouteImport.update({
    id: '/clients/$clientId/',
    path: '/clients/$clientId/',
    getParentRoute: () => PanelRoute,
  } as any)
const PanelClientsClientIdIndexCleanRoute =
  PanelClientsClientIdIndexCleanRouteImport.update({
    id: '/clients/$clientId/index-clean',
    path: '/clients/$clientId/index-clean',
    getParentRoute: () => PanelRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/profile': typeof PanelProfileRoute
  '/clients/clients': typeof PanelClientsClientsRoute
  '/clients': typeof PanelClientsIndexRoute
  '/notifications': typeof PanelNotificationsIndexRoute
  '/clients/$clientId/index-clean': typeof PanelClientsClientIdIndexCleanRoute
  '/clients/$clientId': typeof PanelClientsClientIdIndexRoute
  '/clients/create': typeof PanelClientsCreateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/profile': typeof PanelProfileRoute
  '/clients/clients': typeof PanelClientsClientsRoute
  '/clients': typeof PanelClientsIndexRoute
  '/notifications': typeof PanelNotificationsIndexRoute
  '/clients/$clientId/index-clean': typeof PanelClientsClientIdIndexCleanRoute
  '/clients/$clientId': typeof PanelClientsClientIdIndexRoute
  '/clients/create': typeof PanelClientsCreateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_panel': typeof PanelRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_panel/profile': typeof PanelProfileRoute
  '/_panel/clients/clients': typeof PanelClientsClientsRoute
  '/_panel/clients/': typeof PanelClientsIndexRoute
  '/_panel/notifications/': typeof PanelNotificationsIndexRoute
  '/_panel/clients/$clientId/index-clean': typeof PanelClientsClientIdIndexCleanRoute
  '/_panel/clients/$clientId/': typeof PanelClientsClientIdIndexRoute
  '/_panel/clients/create/': typeof PanelClientsCreateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/profile'
    | '/clients/clients'
    | '/clients'
    | '/notifications'
    | '/clients/$clientId/index-clean'
    | '/clients/$clientId'
    | '/clients/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/profile'
    | '/clients/clients'
    | '/clients'
    | '/notifications'
    | '/clients/$clientId/index-clean'
    | '/clients/$clientId'
    | '/clients/create'
  id:
    | '__root__'
    | '/'
    | '/_panel'
    | '/login'
    | '/register'
    | '/_panel/profile'
    | '/_panel/clients/clients'
    | '/_panel/clients/'
    | '/_panel/notifications/'
    | '/_panel/clients/$clientId/index-clean'
    | '/_panel/clients/$clientId/'
    | '/_panel/clients/create/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PanelRoute: typeof PanelRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_panel': {
      id: '/_panel'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PanelRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_panel/profile': {
      id: '/_panel/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof PanelProfileRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/notifications/': {
      id: '/_panel/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof PanelNotificationsIndexRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/clients/': {
      id: '/_panel/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof PanelClientsIndexRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/clients/clients': {
      id: '/_panel/clients/clients'
      path: '/clients/clients'
      fullPath: '/clients/clients'
      preLoaderRoute: typeof PanelClientsClientsRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/clients/create/': {
      id: '/_panel/clients/create/'
      path: '/clients/create'
      fullPath: '/clients/create'
      preLoaderRoute: typeof PanelClientsCreateIndexRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/clients/$clientId/': {
      id: '/_panel/clients/$clientId/'
      path: '/clients/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof PanelClientsClientIdIndexRouteImport
      parentRoute: typeof PanelRoute
    }
    '/_panel/clients/$clientId/index-clean': {
      id: '/_panel/clients/$clientId/index-clean'
      path: '/clients/$clientId/index-clean'
      fullPath: '/clients/$clientId/index-clean'
      preLoaderRoute: typeof PanelClientsClientIdIndexCleanRouteImport
      parentRoute: typeof PanelRoute
    }
  }
}

interface PanelRouteChildren {
  PanelProfileRoute: typeof PanelProfileRoute
  PanelClientsClientsRoute: typeof PanelClientsClientsRoute
  PanelClientsIndexRoute: typeof PanelClientsIndexRoute
  PanelNotificationsIndexRoute: typeof PanelNotificationsIndexRoute
  PanelClientsClientIdIndexCleanRoute: typeof PanelClientsClientIdIndexCleanRoute
  PanelClientsClientIdIndexRoute: typeof PanelClientsClientIdIndexRoute
  PanelClientsCreateIndexRoute: typeof PanelClientsCreateIndexRoute
}

const PanelRouteChildren: PanelRouteChildren = {
  PanelProfileRoute: PanelProfileRoute,
  PanelClientsClientsRoute: PanelClientsClientsRoute,
  PanelClientsIndexRoute: PanelClientsIndexRoute,
  PanelNotificationsIndexRoute: PanelNotificationsIndexRoute,
  PanelClientsClientIdIndexCleanRoute: PanelClientsClientIdIndexCleanRoute,
  PanelClientsClientIdIndexRoute: PanelClientsClientIdIndexRoute,
  PanelClientsCreateIndexRoute: PanelClientsCreateIndexRoute,
}

const PanelRouteWithChildren = PanelRoute._addFileChildren(PanelRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PanelRoute: PanelRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
