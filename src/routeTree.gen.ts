/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ClientsRouteImport } from './routes/clients'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ClientsIndexRouteImport } from './routes/clients/index'
import { Route as ClientsCreateIndexRouteImport } from './routes/clients/create/index'
import { Route as ClientsClientIdIndexRouteImport } from './routes/clients/$clientId/index'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsIndexRoute = ClientsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientsRoute,
} as any)
const ClientsCreateIndexRoute = ClientsCreateIndexRouteImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => ClientsRoute,
} as any)
const ClientsClientIdIndexRoute = ClientsClientIdIndexRouteImport.update({
  id: '/$clientId/',
  path: '/$clientId/',
  getParentRoute: () => ClientsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clients': typeof ClientsRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients/': typeof ClientsIndexRoute
  '/clients/$clientId': typeof ClientsClientIdIndexRoute
  '/clients/create': typeof ClientsCreateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients': typeof ClientsIndexRoute
  '/clients/$clientId': typeof ClientsClientIdIndexRoute
  '/clients/create': typeof ClientsCreateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/clients': typeof ClientsRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients/': typeof ClientsIndexRoute
  '/clients/$clientId/': typeof ClientsClientIdIndexRoute
  '/clients/create/': typeof ClientsCreateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/clients'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients/'
    | '/clients/$clientId'
    | '/clients/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients'
    | '/clients/$clientId'
    | '/clients/create'
  id:
    | '__root__'
    | '/'
    | '/clients'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients/'
    | '/clients/$clientId/'
    | '/clients/create/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientsRoute: typeof ClientsRouteWithChildren
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients/': {
      id: '/clients/'
      path: '/'
      fullPath: '/clients/'
      preLoaderRoute: typeof ClientsIndexRouteImport
      parentRoute: typeof ClientsRoute
    }
    '/clients/create/': {
      id: '/clients/create/'
      path: '/create'
      fullPath: '/clients/create'
      preLoaderRoute: typeof ClientsCreateIndexRouteImport
      parentRoute: typeof ClientsRoute
    }
    '/clients/$clientId/': {
      id: '/clients/$clientId/'
      path: '/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof ClientsClientIdIndexRouteImport
      parentRoute: typeof ClientsRoute
    }
  }
}

interface ClientsRouteChildren {
  ClientsIndexRoute: typeof ClientsIndexRoute
  ClientsClientIdIndexRoute: typeof ClientsClientIdIndexRoute
  ClientsCreateIndexRoute: typeof ClientsCreateIndexRoute
}

const ClientsRouteChildren: ClientsRouteChildren = {
  ClientsIndexRoute: ClientsIndexRoute,
  ClientsClientIdIndexRoute: ClientsClientIdIndexRoute,
  ClientsCreateIndexRoute: ClientsCreateIndexRoute,
}

const ClientsRouteWithChildren =
  ClientsRoute._addFileChildren(ClientsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientsRoute: ClientsRouteWithChildren,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
